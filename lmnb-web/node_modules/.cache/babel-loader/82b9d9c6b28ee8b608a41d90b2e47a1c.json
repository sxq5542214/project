{"remainingRequest":"G:\\git\\project\\.git\\lm\\node_modules\\thread-loader\\dist\\cjs.js!G:\\git\\project\\.git\\lm\\node_modules\\babel-loader\\lib\\index.js!G:\\git\\project\\.git\\lm\\src\\router\\index.js","dependencies":[{"path":"G:\\git\\project\\.git\\lm\\src\\router\\index.js","mtime":1697463827111},{"path":"G:\\git\\project\\.git\\lm\\babel.config.js","mtime":1686317623477},{"path":"G:\\git\\project\\.git\\lm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881343},{"path":"G:\\git\\project\\.git\\lm\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686317881214},{"path":"G:\\git\\project\\.git\\lm\\node_modules\\babel-loader\\lib\\index.js","mtime":1686317882159}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}