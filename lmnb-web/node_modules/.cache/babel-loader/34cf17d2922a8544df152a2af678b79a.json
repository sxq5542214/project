{"remainingRequest":"H:\\workspaces\\vueProject\\lm\\node_modules\\thread-loader\\dist\\cjs.js!H:\\workspaces\\vueProject\\lm\\node_modules\\babel-loader\\lib\\index.js!H:\\workspaces\\vueProject\\lm\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!H:\\workspaces\\vueProject\\lm\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\workspaces\\vueProject\\lm\\src\\views\\example\\components\\ArticleDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"H:\\workspaces\\vueProject\\lm\\src\\views\\example\\components\\ArticleDetail.vue","mtime":1686317623646},{"path":"H:\\workspaces\\vueProject\\lm\\babel.config.js","mtime":1686317623477},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881343},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686317881214},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\babel-loader\\lib\\index.js","mtime":1686317882159},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881343},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\vue-loader\\lib\\index.js","mtime":1686317877157}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}