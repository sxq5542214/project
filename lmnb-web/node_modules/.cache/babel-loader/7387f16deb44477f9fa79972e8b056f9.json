{"remainingRequest":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\src\\views\\permission\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\src\\views\\permission\\role.vue","mtime":1686317623667},{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\babel.config.js","mtime":1686317623478},{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881344},{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686317881214},{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1686317882159},{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881344},{"path":"G:\\学习\\前端\\vue3\\admin_chn\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1686317877158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}