{"remainingRequest":"H:\\workspaces\\vueProject\\lm\\node_modules\\thread-loader\\dist\\cjs.js!H:\\workspaces\\vueProject\\lm\\node_modules\\babel-loader\\lib\\index.js!H:\\workspaces\\vueProject\\lm\\src\\router\\index.js","dependencies":[{"path":"H:\\workspaces\\vueProject\\lm\\src\\router\\index.js","mtime":1687869702692},{"path":"H:\\workspaces\\vueProject\\lm\\babel.config.js","mtime":1686317623477},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881343},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686317881214},{"path":"H:\\workspaces\\vueProject\\lm\\node_modules\\babel-loader\\lib\\index.js","mtime":1686317882159}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}