{"remainingRequest":"G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\vs_workspace\\git_sxq\\lmnb-web\\src\\views\\business\\record\\recordManager.vue?vue&type=template&id=4b19c5a3&","dependencies":[{"path":"G:\\vs_workspace\\git_sxq\\lmnb-web\\src\\views\\business\\record\\recordManager.vue","mtime":1697634607406},{"path":"G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881343},{"path":"G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1686317878231},{"path":"G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686317881343},{"path":"G:\\vs_workspace\\git_sxq\\lmnb-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1686317877157}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}